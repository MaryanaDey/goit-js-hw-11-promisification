{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","promise","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","reject","id","logSuccess","logError","warn"],"mappings":";AAAA,MAAMA,EAAQC,IAOHC,OALS,IAAIC,QAASC,IACzBC,WAAW,KACRD,EAAQH,IACRA,MAKHK,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACfnB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,EAAUC,KACrCC,MAAAA,EAAeH,EAASI,IAAIC,GAChCA,EAAKR,OAASI,EAAW,IAAKI,EAAMP,QAASO,EAAKP,QAAWO,GAG/C,IAAIjB,QAAQC,IACxBA,EAAQc,MAKRZ,EAASY,GAAgBV,QAAQa,MAAMH,GAW7CJ,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC9BrC,MAAMgB,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,CAACC,EAAaC,EAAWC,KACzC/B,MAAAA,EAAQsB,EAA0B,IAAK,KAclCpB,OAZK,IAAIC,QAAQ,CAACC,EAAS4B,KAElC3B,WAAW,KACYoB,KAAKE,SAAW,GAG/BvB,EAAQyB,EAAYI,GAAIjC,GAExBgC,EAAOH,EAAYI,KAEtBjC,MAOLkC,EAAa,CAACD,EAAI1B,KACtBC,QAAQC,mBAAmBwB,kBAAmB1B,QAG1C4B,EAAWF,IACfzB,QAAQ4B,qCAAqCH;;AC3BjD,aAFA,QAAA,kBACA,QAAA,kBACA,QAAA","file":"src.22246163.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    // Твой код\n    const promise = new Promise( resolve => {\n        setTimeout(() => {\n           resolve(ms); \n        }, ms);\n    });\n    return promise;\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName, callback) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n  \n    const promise = new Promise(resolve => {\n        resolve(updatedUsers)\n    })\n    //callback(updatedUsers);\n  };\n  \n  const logger = updatedUsers => console.table(updatedUsers);\n  \n  /*\n   * Сейчас работает так\n   */\n // toggleUserState(users, 'Mango', logger);\n  //toggleUserState(users, 'Lux', logger);\n  \n  /*\n   * Должно работать так\n   */\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction, onSuccess, onError) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    const promise = new Promise((resolve, reject) => {\n\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n        \n            if (canProcess) {\n                resolve(transaction.id, delay);\n            } else {\n                reject(transaction.id);\n            }\n          }, delay);\n        });\n        return promise;\n        \n    };\n  \n\n  const logSuccess = (id, time) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  /*\n   * Работает так\n   */\n // makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n  //makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n  //makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n  //makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n  /*\n   * Должно работать так\n   */\n  //makeTransaction({ id: 70, amount: 150 })\n  //  .then(logSuccess)\n  //  .catch(logError);\n  \n  //makeTransaction({ id: 71, amount: 230 })\n //   .then(logSuccess)\n  //  .catch(logError);\n  \n  //makeTransaction({ id: 72, amount: 75 })\n //   .then(logSuccess)\n //   .catch(logError);\n  \n // makeTransaction({ id: 73, amount: 100 })\n//    .then(logSuccess)\n //   .catch(logError);","import './js/task-1.js';\nimport './js/task-2.js';\nimport './js/task-3.js';\n"]}